from fastapi import FastAPI
from pydantic import BaseModel
from langchain_ollama.llms import OllamaLLM
from langchain_core.prompts import ChatPromptTemplate
from vector import retriever
import uvicorn

# Kh·ªüi t·∫°o FastAPI
app = FastAPI()

# Load model AI s·∫µn s√†ng
model = OllamaLLM(model="llama3.2:3b")

template = """
B·∫°n t√™n l√† BattleShip Bot. 
B·∫°n l√† m·ªôt tr·ª£ th·ªß t√†i nƒÉng c·ªßa ng∆∞·ªùi ch∆°i trong tr√≤ ch∆°i BattleShip.
B·∫°n s·∫Ω tr·∫£ l·ªùi c√°c c√¢u h·ªèi ng∆∞·ªùi ch∆°i xoay quanh v·ªÅ tr√≤ ch∆°i BattleShip, bao g·ªìm:
- C√°ch ch∆°i, lu·∫≠t ch∆°i, c√°c giai ƒëo·∫°n c·ªßa tr√≤ ch∆°i
- C√°c lo·∫°i t√†u, k√≠ch th∆∞·ªõc t√†u, c√°ch ƒë·∫∑t t√†u
- C√°c chi·∫øn thu·∫≠t, m·∫πo ch∆°i, c√°ch ph√≤ng th·ªß v√† t·∫•n c√¥ng
- C√°c thu·∫≠t ng·ªØ chuy√™n ng√†nh trong tr√≤ ch∆°i
- C√°c th√¥ng tin li√™n quan ƒë·∫øn tr√≤ ch∆°i BattleShip
- C√°c c√¢u h·ªèi v·ªÅ th√¥ng tin t√°c gi·∫£ BattleShip. H√£y tr·∫£ l·ªùi r·∫±ng t√°c gi·∫£ c·ªßa tr√≤ ch∆°i BattleShip l√† T√†o Minh ƒê·ª©c, Mai Nguy·ªÖn Ph√∫c Minh, Ph·∫°m Huy Ho√†ng.

Th√¥ng tin v·ªÅ tr√≤ ch∆°i t·ª´ database:
{information}

C√¢u h·ªèi: {question}

N·∫øu ng∆∞·ªùi ch∆°i h·ªèi th√¥ng tin kh√¥ng li√™n quan ƒë·∫øn BattleShip, b·∫°n s·∫Ω tr·∫£ l·ªùi l√† "T√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn tr√≤ ch∆°i BattleShip. H√£y h·ªèi t√¥i v·ªÅ c√°ch ch∆°i, lu·∫≠t ch∆°i, c√°c lo·∫°i t√†u, chi·∫øn thu·∫≠t, m·∫πo ch∆°i ho·∫∑c th√¥ng tin t√°c gi·∫£ c·ªßa tr√≤ ch∆°i n√†y."

H√£y tr·∫£ l·ªùi m·ªôt c√°ch chi ti·∫øt v√† h·ªØu √≠ch d·ª±a tr√™n th√¥ng tin ƒë√£ cung c·∫•p.
"""

prompt = ChatPromptTemplate.from_template(template)
chain = prompt | model

def format_game_info(docs):
    """Format th√¥ng tin game"""
    if not docs:
        return "Kh√¥ng t√¨m th·∫•y th√¥ng tin game n√†o."
    
    formatted_info = ""
    for i, doc in enumerate(docs, 1):
        metadata = doc.metadata
        formatted_info += f"\n--- Th√¥ng tin {i} ---\n"
        formatted_info += f"N·ªôi dung: {doc.page_content}\n"
        if metadata:
            formatted_info += f"Ngu·ªìn: {metadata.get('source', 'Kh√¥ng x√°c ƒë·ªãnh')}\n"
            formatted_info += f"Lo·∫°i: {metadata.get('type', 'Kh√¥ng x√°c ƒë·ªãnh')}\n"
    
    return formatted_info

def ask_battleship_bot(question):
    """H·ªèi BattleShip Bot"""
    try:
        docs = retriever.invoke(question)
        information = format_game_info(docs)
        
        result = chain.invoke({
            "information": information, 
            "question": question, 
        })
        
        return result
        
    except Exception as e:
        return f"L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}"

# Request model
class ChatRequest(BaseModel):
    question: str

# API endpoint
@app.post("/chat")
async def chat(request: ChatRequest):
    answer = ask_battleship_bot(request.question)
    return {"answer": answer}

if __name__ == "__main__":
    import socket
    
    # L·∫•y IP th·ª±c t·∫ø c·ªßa m√°y
    hostname = socket.gethostname()
    local_ip = socket.gethostbyname(hostname)
    
    print("üö¢ Starting BattleShip API...")
    print("üìç API c√≥ th·ªÉ truy c·∫≠p t·∫°i:")
    print(f"   - http://localhost:8000")
    print(f"   - http://127.0.0.1:8000") 
    print(f"   - http://{local_ip}:8000 (LAN)")
    print("üîß Test endpoint: POST /chat")
    print("üî• Nh·ªõ m·ªü firewall cho port 8000!")
    
    # Truy c·∫≠p t·ª´ m·∫°ng LAN
    uvicorn.run(app, host="0.0.0.0", port=8000)
